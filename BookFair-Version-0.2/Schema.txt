create table public.book_search_cache (
  id uuid not null default gen_random_uuid (),
  search_query character varying(500) null,
  filters_hash character varying(100) null,
  user_location_hash character varying(100) null,
  cached_results jsonb null,
  result_count integer null,
  expires_at timestamp without time zone null,
  created_at timestamp without time zone null default now(),
  constraint book_search_cache_pkey primary key (id)
) TABLESPACE pg_default;


create table public.book_views (
  id uuid not null default gen_random_uuid (),
  book_id uuid not null,
  viewer_id uuid null,
  viewer_ip inet null,
  referrer text null,
  created_at timestamp without time zone null default now(),
  constraint book_views_pkey primary key (id),
  constraint book_views_book_id_fkey foreign KEY (book_id) references books (id) on delete CASCADE,
  constraint book_views_viewer_id_fkey foreign KEY (viewer_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_book_views_book_id on public.book_views using btree (book_id) TABLESPACE pg_default;

create index IF not exists idx_book_views_created_at on public.book_views using btree (created_at) TABLESPACE pg_default;





create table public.books (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  title character varying(200) not null,
  description text null,
  author character varying(100) not null,
  category character varying(50) not null,
  book_type character varying(20) not null,
  grade character varying(10) null,
  subject character varying(50) null,
  board character varying(20) null default 'CBSE'::character varying,
  academic_year character varying(10) null,
  publisher character varying(100) null,
  edition_year integer null,
  condition character varying(20) not null,
  price numeric(10, 2) not null,
  original_price numeric(10, 2) null,
  negotiable boolean null default true,
  isbn character varying(20) null,
  barcode character varying(50) null,
  lat numeric(10, 8) null,
  lng numeric(11, 8) null,
  location text null,
  area character varying(100) null,
  pincode character varying(10) null,
  landmark character varying(200) null,
  school_name character varying(200) null,
  school_id uuid null,
  school_lat numeric(10, 8) null,
  school_lng numeric(11, 8) null,
  image_url text null,
  images text[] null,
  video_url text null,
  view_count integer null default 0,
  favorite_count integer null default 0,
  message_count integer null default 0,
  book_score numeric(5, 2) null default 0,
  status character varying(20) null default 'available'::character varying,
  verification_status character varying(20) null default 'pending'::character varying,
  featured boolean null default false,
  boost_expires_at timestamp without time zone null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint books_pkey primary key (id),
  constraint books_school_id_fkey foreign KEY (school_id) references school_clusters (id),
  constraint books_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE,
  constraint books_user_id_profiles_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE,
  constraint books_status_check check (
    (
      (status)::text = any (
        (
          array[
            'available'::character varying,
            'sold'::character varying,
            'reserved'::character varying,
            'hidden'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint books_condition_check check (
    (
      (condition)::text = any (
        (
          array[
            'New'::character varying,
            'Like New'::character varying,
            'Good'::character varying,
            'Fair'::character varying,
            'Poor'::character varying
          ]
        )::text[]
      )
    )
  ),
  constraint books_book_type_check check (
    (
      (book_type)::text = any (
        (
          array[
            'author'::character varying,
            'school'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_books_location on public.books using btree (lat, lng) TABLESPACE pg_default;

create index IF not exists idx_books_school_grade_subject on public.books using btree (school_name, grade, subject) TABLESPACE pg_default;

create index IF not exists idx_books_category_condition on public.books using btree (category, condition) TABLESPACE pg_default;

create index IF not exists idx_books_price on public.books using btree (price) TABLESPACE pg_default;

create index IF not exists idx_books_status on public.books using btree (status) TABLESPACE pg_default;

create index IF not exists idx_books_created_at on public.books using btree (created_at) TABLESPACE pg_default;

create index IF not exists idx_books_user_id on public.books using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_books_school_id on public.books using btree (school_id) TABLESPACE pg_default;

create trigger update_books_updated_at BEFORE
update on books for EACH row
execute FUNCTION update_updated_at ();



create table public.favorites (
  id uuid not null default gen_random_uuid (),
  user_id uuid not null,
  book_id uuid not null,
  created_at timestamp without time zone null default now(),
  constraint favorites_pkey primary key (id),
  constraint favorites_user_id_book_id_key unique (user_id, book_id),
  constraint favorites_book_id_fkey foreign KEY (book_id) references books (id) on delete CASCADE,
  constraint favorites_user_id_fkey foreign KEY (user_id) references profiles (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_favorites_user_id on public.favorites using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_favorites_book_id on public.favorites using btree (book_id) TABLESPACE pg_default;



create table public.messages (
  id uuid not null default gen_random_uuid (),
  book_id uuid not null,
  sender_id uuid not null,
  receiver_id uuid not null,
  message_text text not null,
  message_type character varying(20) null default 'text'::character varying,
  offer_amount numeric(10, 2) null,
  read_at timestamp without time zone null,
  created_at timestamp without time zone null default now(),
  constraint messages_pkey primary key (id),
  constraint messages_book_id_fkey foreign KEY (book_id) references books (id) on delete CASCADE,
  constraint messages_receiver_id_fkey foreign KEY (receiver_id) references profiles (id) on delete CASCADE,
  constraint messages_sender_id_fkey foreign KEY (sender_id) references profiles (id) on delete CASCADE,
  constraint messages_message_type_check check (
    (
      (message_type)::text = any (
        (
          array[
            'text'::character varying,
            'offer'::character varying,
            'image'::character varying,
            'location'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_messages_book_id on public.messages using btree (book_id) TABLESPACE pg_default;

create index IF not exists idx_messages_conversation on public.messages using btree (sender_id, receiver_id, book_id) TABLESPACE pg_default;



create table public.profiles (
  id uuid not null,
  username character varying(50) null,
  email character varying(255) null,
  phone character varying(15) null,
  location text null,
  lat numeric(10, 8) null,
  lng numeric(11, 8) null,
  pincode character varying(10) null,
  area character varying(100) null,
  landmark character varying(200) null,
  avatar_url text null,
  theme character varying(20) null default 'system'::character varying,
  rating numeric(3, 2) null default 5.0,
  total_sales integer null default 0,
  total_purchases integer null default 0,
  verified_seller boolean null default false,
  is_active boolean null default true,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint profiles_pkey primary key (id),
  constraint profiles_username_key unique (username),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_profiles_location on public.profiles using btree (lat, lng) TABLESPACE pg_default;

create index IF not exists idx_profiles_verified on public.profiles using btree (verified_seller) TABLESPACE pg_default;

create trigger update_profiles_updated_at BEFORE
update on profiles for EACH row
execute FUNCTION update_updated_at ();



create table public.profiles (
  id uuid not null,
  username character varying(50) null,
  email character varying(255) null,
  phone character varying(15) null,
  location text null,
  lat numeric(10, 8) null,
  lng numeric(11, 8) null,
  pincode character varying(10) null,
  area character varying(100) null,
  landmark character varying(200) null,
  avatar_url text null,
  theme character varying(20) null default 'system'::character varying,
  rating numeric(3, 2) null default 5.0,
  total_sales integer null default 0,
  total_purchases integer null default 0,
  verified_seller boolean null default false,
  is_active boolean null default true,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  constraint profiles_pkey primary key (id),
  constraint profiles_username_key unique (username),
  constraint profiles_id_fkey foreign KEY (id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_profiles_location on public.profiles using btree (lat, lng) TABLESPACE pg_default;

create index IF not exists idx_profiles_verified on public.profiles using btree (verified_seller) TABLESPACE pg_default;

create trigger update_profiles_updated_at BEFORE
update on profiles for EACH row
execute FUNCTION update_updated_at ();